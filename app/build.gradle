plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
    id "com.google.protobuf" version "$protobufPluginVersion"
    id "com.google.firebase.crashlytics"
    id "com.google.gms.google-services"
}

apply {
    from '../protobuf.gradle'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "org.positive.daymotion"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "0.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def secretProperties = new Properties()
        def secretPropsFile = rootProject.file("secret.properties")
        if (secretPropsFile.exists()) {
            secretProperties.load(new FileInputStream(secretPropsFile))
        }
        buildConfigField("String", "OAUTH_CLIENT_ID", secretProperties['OAUTH_CLIENT_ID'] ?: System.getenv('OAUTH_CLIENT_ID') ?: "")
        buildConfigField("String", "OAUTH_CLIENT_SECRET", secretProperties['OAUTH_CLIENT_SECRET'] ?: System.getenv('OAUTH_CLIENT_SECRET') ?: "")
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            resValue("string", "app_name", "Daymotion-Debug")
        }

        qa {
            initWith debug
            applicationIdSuffix ".qa"
            resValue("string", "app_name", "Daymotion-Qa")
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue("string", "app_name", "Daymotion")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding = true
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.ExperimentalStdlibApi"]
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // Android Basic
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "com.google.android.material:material:$materialVirsion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"

    // KTX
    implementation "androidx.core:core-ktx:$coreKtxVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentKtxVersion"

    // DataStore
    implementation "androidx.datastore:datastore:$dataStoreVersion"
    implementation "androidx.datastore:datastore-rxjava3:$dataStoreVersion"
    implementation "androidx.datastore:datastore-preferences:$dataStoreVersion"
    implementation "androidx.datastore:datastore-preferences-rxjava3:$dataStoreVersion"
    implementation "com.google.protobuf:protobuf-javalite:$protobufJavaliteVersion"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    debugImplementation "com.github.chuckerteam.chucker:library:$chuckerVersion"
    qaImplementation "com.github.chuckerteam.chucker:library:$chuckerVersion"
    releaseImplementation "com.github.chuckerteam.chucker:library-no-op:$chuckerVersion"

    // RxJava
    implementation "io.reactivex.rxjava3:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava3:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava3:rxkotlin:$rxKotlinVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:$hiltCoreVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltCoreVersion"

    // Chrome Custom Tabs
    implementation "androidx.browser:browser:$chromeCustomTabsVersion"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:$firebaseVersion")
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-config-ktx'

    // Test
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}